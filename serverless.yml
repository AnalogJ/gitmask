# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    v1.docs.serverless.com
#
# Happy Coding!

service: ${env:GITMASK_SERVICE, 'gitmask-api'} # NOTE: update this with your service name

provider:
  logRetentionInDays: 60
  cfLogs: true
  name: aws
  stage: 'beta'
  region: us-east-1
  timeout: 40 # optional, default is 6
  runtime: nodejs10.x
  memorySize: 128
  environment:
    GITMASK_SERVICE: ${self:service}
    DOMAIN: git.gitmask.com
    DEPLOY_SHA: ${env:CIRCLE_SHA1}
    STAGE: ${opt:stage, self:provider.stage}
    NODE_ENV: production
    GITHUB_USER: ${env:GITHUB_USER, 'gitmask-anonymous'}
    GITHUB_API_TOKEN: ${env:GITHUB_API_TOKEN}
    DEBUG: gitmask:*

  apiGateway:
    binaryMediaTypes:
      - '*/*'

#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#        - "s3:GetObject"
#      Resource: "arn:aws:s3:::${self:service}-${opt:stage, self:provider.stage}-*"

custom:
  apigwBinary:
    types:           #list of mime-types
      - 'application/x-git-receive-pack-request'
      - 'application/x-git-receive-pack-result'

  variables:
    master:
      cleanup_enabled: true
      debug: ''
      api_path: ''
    beta:
      cleanup_enabled: false
      debug: gitmask:*
      api_path: 'beta'
    local:
      cleanup_enabled: false
      debug: gitmask:*
      api_path: 'local'

  customDomain:
    domainName: git.gitmask.com
    basePath: ${self:custom.variables.${opt:stage, self:provider.stage}.api_path}
    stage: ${self:provider.stage}
    createRoute53Record: false


  # overridden from https://github.com/serverless/serverless/blob/03cc50b246c656183110669126a632735ea46b15/lib/plugins/aws/deploy/compile/events/apiGateway/lib/method/integration.js#L106-L140
  standardResponseTemplate: "{\"success\":true, \"data\": $input.json('$') }"
  errorResponseTemplate: "#set($inputRoot = $input.path('$.errorMessage')){\"success\":false, \"error\": $inputRoot }"

  standardResponses:
    headers:
      Content-Type: "'application/json'"
    template: ${self:custom.standardResponseTemplate}
    statusCodes:
      200:
        pattern: ''
        template:
          application/json: ${self:custom.standardResponseTemplate}
      400:
        template:
          application/json: ${self:custom.errorResponseTemplate}
        pattern: '.*\[400\].*'
      404:
        template:
          application/json: ${self:custom.errorResponseTemplate}
        pattern: '.*\[404\].*'
      500:
        template:
          application/json: ${self:custom.errorResponseTemplate}
        pattern: '.*\[500\].*'

#  redirectResponse:
#    headers:
#      Location: "integration.response.body.headers.Location"
#      Content-Type: "'application/json'"
#    statusCodes:
#      307:
#        pattern: ''
#        template:
#          application/json: "{}"

# you can add packaging information here
package:
#  individually: true # required for https://github.com/FidelLimited/serverless-plugin-optimize
  # only the following paths will be included in the resulting artifact which will be uploaded. Without specific include everything in the current folder will be included
  include:
    - src
    - functions
    - opt
  # The following paths will be excluded from the resulting artifact. If both include and exclude are defined we first apply the include, then the exclude so files are guaranteed to be excluded
  exclude:
    - tmp
    - .git
    - .idea
    - no
    - opt

functions:
  version:
    handler: src/version.handler
    events:
      - http:
          path: version
          method: get
          response: ${self:custom.standardResponses}
          integration: lambda

  # V2 Backend Methods
  git-info-refs:
    handler: src/git-info-refs.handler
    events:
      - http:
          # https://beta.gitmask.com/gh/AnalogJ/capsulecd.git
          path: gh/{org}/{repo}/info/refs
          method: get
          cors: true

  git-receive-pack:
    handler: src/git-receive-pack.handler
    events:
      - http:
          # https://beta.gitmask.com/gh/AnalogJ/capsulecd.git
          path: gh/{org}/{repo}/git-receive-pack
          method: post
          cors: true
          contentHandling: CONVERT_TO_BINARY


#resources:
#  Resources:
#    $ref: ./cloudformation-resources.yaml

plugins:
   - serverless-prune-plugin
   - serverless-offline
   - serverless-domain-manager
   - serverless-apigw-binary
   - serverless-apigwy-binary

